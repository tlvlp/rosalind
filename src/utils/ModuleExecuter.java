package utils;

import java.lang.reflect.*;
import java.util.ArrayList;

/**
 * @author tlvlp
 */
public class ModuleExecuter {
    
    /**
     * Invokes a problem module using reflection and returns the results to main.
     * @throws java.lang.Exception
     * @requires A valid problemID in String format
     *           problemID = (class name in the problems package) = (ID in Rosalind url) = (ID in input txt file name)
     * @requires An ArrayList (inList) with the parsed contents of the input File
     * @return   The ArrayList with the results generated by the problem module
     * @param problemID
     * @param inList
     */
    public static ArrayList<String> launch(String problemID, ArrayList<String> inList) throws Exception {
        try {
            ArrayList<String> outList = new ArrayList<>();
            String aClass = "problems." + problemID;
            String aMethod = "solve";                                                   //the method name for all the problems classes are the same
            Class[] parameterTypes = new Class[] {java.util.ArrayList.class};
            Object[] arguments = new Object[] {inList};
            Class thisClass = Class.forName(aClass);
            Object iClass = thisClass.newInstance();                                    //get the instance
            Method thisMethod = thisClass.getDeclaredMethod(aMethod, parameterTypes);   //get the method
            return (ArrayList<String>) thisMethod.invoke(iClass, arguments);            //call the method
        } catch (Exception e) {                                                         //terminating run for any exception
            System.err.println("Failed to execute the problem module for the following reason: "
                               +e.toString()+
                               "\nTerminating run!");
            System.exit(0);
        }
        return inList;                                                                  //this return statement is never used - still looking for a more elegant solution
    }
}  
